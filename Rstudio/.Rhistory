df1$Integral <- df1$Integral/MaxIntegral*MaxIntegral.abs # normalization
View(df1)
MaxIntegral
df=read.csv(file="t1Integral101.csv", header=TRUE, sep=',')
names(df)=c("Integral","Error","Delay")
df1 <- df[c("Delay", "Integral")]
MaxIntegral <- df1$Integral[length(df1$Integral)] # find max abs value for integral
MaxIntegral.abs <- abs(MaxIntegral) # absolute value
MaxDelay <- df1$Delay[length(df1$Integral)]
df1$Integral <- df1$Integral/MaxIntegral*MaxIntegral.abs # normalization
View(df1)
MaxIntegral.abs
View(df)
f_T1 <- function(t, a, T1) {
1-2*a*exp(-t/T1)
}
fit <- nls(Integral~f_T1(Delay,a,T1), data=df1, start=list(a=1, T1=1))
summary(fit)
parameter.est <- as.list(coef(fit))
f_T1 <- function(t, a, T1) {
1-2*a*exp(-t/T1)
}
fit <- nls(Integral~f_T1(Delay,a,T1), data=df1, start=list(a=1, T1=1))
summary(fit)
parameter.est <- as.list(coef(fit))
time_fitted <- seq(0, MaxDelay*1.15, MaxDelay*1.15/50)
fitted.data <- data.frame(x=time_fitted, y=predict(fit, list(Delay = time_fitted)))
# plot
ggplot(df1,aes(x=Delay,y=Integral)) + geom_point(color="red", size=3) + scale_x_continuous(breaks=1:10) + xlab("delay (s)")+ylab("abs integral")
last_plot() + geom_line(data = fitted.data, aes(x=x, y=y), color ='blue', alpha=.5)
fit <- nls(Integral~f_T1(Delay,a,T1), data=df1, start=list(a=MaxIntegral.abs, T1=1))
summary(fit)
parameter.est <- as.list(coef(fit))
fit <- nls(Integral~f_T1(Delay,a,T1), data=df1, start=list(a=MaxIntegral.abs, T1=1))
summary(fit)
time_fitted <- seq(0, MaxDelay*1.15, MaxDelay*1.15/50)
fitted.data <- data.frame(x=time_fitted, y=predict(fit, list(Delay = time_fitted)))
ggplot(df1,aes(x=Delay,y=Integral)) + geom_point(color="red", size=3) + scale_x_continuous(breaks=1:10) + xlab("delay (s)")+ylab("abs integral")
last_plot() + geom_line(data = fitted.data, aes(x=x, y=y), color ='blue', alpha=.5)
f_T1 <- function(t, a,b, T1) {
b-2*a*exp(-t/T1)
}
fit <- nls(Integral~f_T1(Delay,a,b,T1), data=df1, start=list(a=MaxIntegral.abs, b=MaxIntegral.abs, T1=1))
summary(fit)
parameter.est <- as.list(coef(fit))
time_fitted <- seq(0, MaxDelay*1.15, MaxDelay*1.15/50)
fitted.data <- data.frame(x=time_fitted, y=predict(fit, list(Delay = time_fitted)))
ggplot(df1,aes(x=Delay,y=Integral)) + geom_point(color="red", size=3) + scale_x_continuous(breaks=1:10) + xlab("delay (s)")+ylab("abs integral")
last_plot() + geom_line(data = fitted.data, aes(x=x, y=y), color ='blue', alpha=.5)
parameter.est
summary(fit)$coef[[4]]
summary(fit)$coef[[6]]
T1 <- parameter.est$T1
T1_SD <- summary(fit)$coef[[6]]
ggplot(df1,aes(x=Delay,y=Integral)) + geom_point(color="red", size=3) + scale_x_continuous(breaks=1:10) + xlab("delay (s)")+ylab("peak integral")
last_plot() + geom_line(data = fitted.data, aes(x=x, y=y), color ='blue', alpha=.5)
T1_SD/T1
setwd("~/Documents/Programs/ODNP_Analysis/Rstudio")
df=read.csv(file="Emax.csv", header=TRUE, sep=',')
names(df)=c("Power","Integral")
df$Integral[[1]]
df$Integral <- df$Integral/df$Integral[[1]] # normalization
View(df)
df_Emax=read.csv(file="Emax.csv", header=TRUE, sep=',')
names(df_Emax)=c("Power","Integral")
df_Emax$Integral <- df$Integral/df$Integral[[1]] # normalization
f_Emax <- function(I0, A, B, P) {
I0 - A*P/(1 + B*P)
}
fit_Emax <- nls(Integral~f_Emax(I0, A, B, Power), data=df_Emax, start=list(I0 =1, A=1, B=1))
summary(fit_Emax)
MaxPower <- df_Emax$Power[length(df_Emax$Power)]
MaxPower
ggplot(df_Emax,aes(x=Power,y=Integral)) + geom_point(color="red", size=3)
ggplot(df_Emax,aes(x=Power,y=Integral)) + geom_point(color="red", size=3) + scale_x_continuous(breaks=1:10) + xlab("Power (Watt)")+ylab("peak integral")
last_plot() + geom_line(data = fitted.data, aes(x=x, y=y), color ='blue', alpha=.5)
power_fitted <- seq(0, MaxPower*1.15, MaxPower*1.15/50)
fitted.data <- data.frame(x=power_fitted, y=predict(fit_Emax, list(Power = power_fitted )))
ggplot(df_Emax,aes(x=Power,y=Integral)) + geom_point(color="red", size=3) + scale_x_continuous(breaks=1:10) + xlab("Power (Watt)")+ylab("peak integral")
last_plot() + geom_line(data = fitted.data, aes(x=x, y=y), color ='blue', alpha=.5)
parameter.est <- as.list(coef(fit_Emax))
as.list(coef(fit_Emax))
Emax <- parameter.est$I0 - parameter.est$A/parameter.est$B
Emax
summary(fit_Emax)
summary(fit_Emax)$coef[[2]]
summary(fit_Emax)$coef[[3]]
summary(fit_Emax)$coef[[4]]
f_E <- function(I0, A, B, P) {
I0 - A*P/(1 + B*P)
}
fit_E <- nls(Integral~f_E(I0, A, B, Power), data=df_Emax, start=list(I0 =1, A=1, B=1))
summary(fit_E)
parameter.est <- as.list(coef(fit_E))
f_Emax <- function(I0, A, B){
I0 - A/B
}
Emax <- f_Emax(parameter.est$I0, parameter.est$A, parameter.est$B)
Emax
T1 <- parameter.est$T1
cat("Current working dir: ", T1)
message("Current working dir: ", T1)
print("Current working dir: ", T1)
print( T1)
T1 <- parameter.est$T1
T1
library(ggplot2) #library for plotting
setwd("~/Documents/Programs/ODNP_Analysis/Rstudio")
#load T1 data
df=read.csv(file="t1Integral101.csv", header=TRUE, sep=',')
names(df)=c("Integral","Error","Delay")
df1 <- df[c("Delay", "Integral")]
MaxIntegral <- df1$Integral[length(df1$Integral)] # find max abs value for integral
MaxIntegral.abs <- abs(MaxIntegral) # absolute value
MaxDelay <- df1$Delay[length(df1$Integral)]
df1$Integral <- df1$Integral/MaxIntegral*MaxIntegral.abs # normalization
# define T1 function and fit the data
f_T1 <- function(t, a,b, T1) {
b-2*a*exp(-t/T1)
}
#non-least squared fit
fit <- nls(Integral~f_T1(Delay,a,b,T1), data=df1, start=list(a=MaxIntegral.abs, b=MaxIntegral.abs, T1=1))
#summary(fit)
parameter.est <- as.list(coef(fit))
# simulated predicted profile at estimated parameter values
time_fitted <- seq(0, MaxDelay*1.15, MaxDelay*1.15/50)
fitted.data <- data.frame(x=time_fitted, y=predict(fit, list(Delay = time_fitted)))
# plot
ggplot(df1,aes(x=Delay,y=Integral)) + geom_point(color="red", size=3) + scale_x_continuous(breaks=1:10) + xlab("delay (s)")+ylab("peak integral") + geom_line(data = fitted.data, aes(x=x, y=y), color ='blue', alpha=.5)
T1 <- parameter.est$T1
print( T1)
print("T1=" T1)
print("T1=", T1)
message("T1=", T1)
message("T1=", T1,"s")
message("T1=", T1," s")
T1 <- parameter.est$T1
message("T1=", T1," s")
T1_SD <- summary(fit)$coef[[6]]
message("T1 SD=", T1_SD ," s")
message("T1=", round(T1, digits=3)," s")
message("T1 = ", round(T1, digits=3)," s")
message("T1 (SD) = ", round(T1_SD, digits=3)," s")
library(ggplot2) #library for plotting
setwd("~/Documents/Programs/ODNP_Analysis/Rstudio")
df_Emax=read.csv(file="Emax.csv", header=TRUE, sep=',')
names(df_Emax)=c("Power","Integral")
df_Emax$Integral <- df$Integral/df$Integral[[1]] # normalization
df_Emax$Integral <- df_Emax$Integral/df$Integral[[1]] # normalization
MaxPower <- df_Emax$Power[length(df_Emax$Power)]
f_E <- function(I0, A, B, P) {
I0 - A*P/(1 + B*P)
}
f_Emax <- function(I0, A, B){
I0 - A/B
}
f_Emax <- function(I0, A, B){
I0 - A/B
}
fit_E <- nls(Integral~f_E(I0, A, B, Power), data=df_Emax, start=list(I0 =1, A=1, B=1))
parameter.est <- as.list(coef(fit_E))
power_fitted <- seq(0, MaxPower*1.15, MaxPower*1.15/50)
fitted.data <- data.frame(x=power_fitted, y=predict(fit_Emax, list(Power = power_fitted )))
power_fitted <- seq(0, MaxPower*1.15, MaxPower*1.15/50)
fitted.data <- data.frame(x=power_fitted, y=predict(fit_Emax, list(Power = power_fitted )))
fitted.data <- data.frame(x=power_fitted, y=predict(fit_E, list(Power = power_fitted )))
ggplot(df_Emax,aes(x=Power,y=Integral)) + geom_point(color="red", size=3) + scale_x_continuous(breaks=1:10) + xlab("Power (Watt)")+ylab("peak integral") + geom_line(data = fitted.data, aes(x=x, y=y), color ='blue', alpha=.5)
ggplot(df_Emax,aes(x=Power,y=Integral)) + geom_point(color="red", size=3) + scale_x_continuous(breaks=1:10) + xlab("Power (Watt)")+ylab("peak integral") + geom_line(data = fitted.data, aes(x=x, y=y), color ='blue', alpha=.5)
View(df_Emax)
Integral/df$Integral[[1]]
df_Emax$Integral <- df_Emax$Integral/df_Emax$Integral[[1]] # normalization
MaxPower <- df_Emax$Power[length(df_Emax$Power)]
fit_E <- nls(Integral~f_E(I0, A, B, Power), data=df_Emax, start=list(I0 =1, A=1, B=1))
parameter.est <- as.list(coef(fit_E))
power_fitted <- seq(0, MaxPower*1.15, MaxPower*1.15/50)
fitted.data <- data.frame(x=power_fitted, y=predict(fit_E, list(Power = power_fitted )))
ggplot(df_Emax,aes(x=Power,y=Integral)) + geom_point(color="red", size=3) + scale_x_continuous(breaks=1:10) + xlab("Power (Watt)")+ylab("peak integral") + geom_line(data = fitted.data, aes(x=x, y=y), color ='blue', alpha=.5)
Emax <- f_Emax(parameter.est$I0, parameter.est$A, parameter.est$B)
message("Emax = ", round(Emax, digits=3))
D(f_Emax(I0,A,B), "I0")
deriv(f_Emax(I0,A,B), "I0")
f_Emax <- function(I0, A, B){
I0 - A/B
}
f_Emax
D(f_Emax(I0,A,B), "I0")
D(expression(f_Emax(I0,A,B)), "I0")
deriv(expression(f_Emax(I0,A,B)), "I0")
deriv(expression(f_Emax(I0,A,B)), "I0")
deriv(expression(I0 - A/B, "I0")
)
deriv(expression(I0 - A/B), "I0")
deriv(I0 - A/B, "I0")
D(expression(I0 - A/B), "I0")
D(expression(I0^2 - A/B), "I0")
D(I0^2 - A/B, "I0")
Emax_SD <- ((D(expression(I0 - A/B), "I0")*I0_SD)^2
+(D(expression(I0 - A/B), "A")*A_SD)^2
+(D(expression(I0 - A/B), "B")*B_SD)^2)^0.5
I0_SD <- summary(fit_Emax)$coef[[4]]
A_SD <-summary(fit_Emax)$coef[[5]]
B_SD <- summary(fit_Emax)$coef[[6]]
Emax_SD <- ((D(expression(I0 - A/B), "I0")*I0_SD)^2
+(D(expression(I0 - A/B), "A")*A_SD)^2
+(D(expression(I0 - A/B), "B")*B_SD)^2)^0.5
(D(expression(I0 - A/B), "A")
)
D(expression(I0 - A/B), "A")
Emax_SD <- ((D(expression(I0 - A/B), "I0")*I0_SD)^2 +(D(expression(I0 - A/B), "A")*A_SD)^2 +(D(expression(I0 - A/B), "B")*B_SD)^2)^0.5
A_SD
D(expression(I0 - A/B), "A")
D(expression(I0 - A/B), "A")*A_SD
A_SD*D(expression(I0 - A/B), "A")
(1/B)*A_SD
(1/str(B)*A_SD
)
(1/str(B))*A_SD
f_E_SD <- function(I0, A, B) {
((D(expression(I0 - A/B), "I0")*I0_SD)^2 +(D(expression(I0 - A/B), "A")*A_SD)^2 +(D(expression(I0 - A/B), "B")*B_SD)^2)^0.5
}
f_E_SD(I0_SD, A_SD, B_SD)
f_E_SD(I0_SD, A_SD, B_SD)
summary(fit_Emax)
summary(fit_Emax)$coef[[1]]
I0 <- summary(fit_Emax)$coef[[1]]
A <- summary(fit_Emax)$coef[[2]]
B <- summary(fit_Emax)$coef[[2]]
I0_SD <- summary(fit_Emax)$coef[[4]]
A_SD <-summary(fit_Emax)$coef[[5]]
B_SD <- summary(fit_Emax)$coef[[6]]
f_E_SD <- function(I0, A, B) {
((D(expression(I0 - A/B), "I0")*I0_SD)^2 +(D(expression(I0 - A/B), "A")*A_SD)^2 +(D(expression(I0 - A/B), "B")*B_SD)^2)^0.5
}
f_E_SD(I0, A<B)
f_E_SD(I0, A,B)
f_E_SD
f_E_SD(0.77, 65.96, 5.06)
f_E_SD <- function(I0, A, B) {
((D(expression(I0 - A/B), "I0")*summary(fit_Emax)$coef[[4]])^2 +(D(expression(I0 - A/B), "A")*summary(fit_Emax)$coef[[5]])^2 +(D(expression(I0 - A/B), "B")*summary(fit_Emax)$coef[[6]])^2)^0.5
}
f_E_SD(0.77, 65.96, 5.06)
summary(fit_Emax)$coef[[5]]*2
summary(fit_Emax)$coef[[5]]*A
summary(fit_Emax)$coef[[5]]*A1
library(ggplot2) #library for plotting
setwd("~/Documents/Programs/ODNP_Analysis/Rstudio")
df_Emax=read.csv(file="Emax.csv", header=TRUE, sep=',')
names(df_Emax)=c("Power","Integral")
df_Emax$Integral <- df_Emax$Integral/df_Emax$Integral[[1]] # normalization
MaxPower <- df_Emax$Power[length(df_Emax$Power)]
f_E <- function(I0, A, B, P) {
I0 - A*P/(1 + B*P)
}
# function for Emax
f_Emax <- function(I0, A, B){
I0 - A/B
}
fit_E <- nls(Integral~f_E(I0, A, B, Power), data=df_Emax, start=list(I0 =1, A=1, B=1))
parameter.est <- as.list(coef(fit_E))
parameter.est
power_fitted <- seq(0, MaxPower*1.15, MaxPower*1.15/50)
fitted.data <- data.frame(x=power_fitted, y=predict(fit_E, list(Power = power_fitted )))
ggplot(df_Emax,aes(x=Power,y=Integral)) + geom_point(color="red", size=3) + scale_x_continuous(breaks=1:10) + xlab("Power (Watt)")+ylab("peak integral") + geom_line(data = fitted.data, aes(x=x, y=y), color ='blue', alpha=.5)
# Emax data and standard deviation of Emax
Emax <- f_Emax(parameter.est$I0, parameter.est$A, parameter.est$B)
message("Emax = ", round(Emax, digits=3))
df_T1=read.csv(file="PowerVsT1.csv", header=TRUE, sep=',')
names(df_Emax)=c("Power_T1","T1p")
df_T1$T1p(length(df_T1$T1p))
length(df_T1$T1p)
View(df_T1)
names(df_T1)=c("Power_T1","T1p", "T1p_error")
length(df_T1$T1p)
T10 <- df_T1$T1p(length(df_T1$T1p))
df_T1$T1p[12]
T10_SD <- df_T1$T1p_error[length(df_T1$T1p)]
T10_SD
df_T1p[,12]
df_T1[,12]
df_T1[12,]
df_T1[1,12,]
df_T1[1,12]
df_T1[12]
df_T1[12,]
df_T1[12,3]
df_T1[12,]
df_T1[1:12,]
df_T1[1:length(df_T1$T1p)-1,]
gglot(data=df_T1p, aes(x=Power_T1, y=T1p)) + geom_point()
ggplot(data=df_T1p, aes(x=Power_T1, y=T1p)) + geom_point()
df_T1p
library(ggplot2) #library for plotting
df_Emax=read.csv(file="Emax.csv", header=TRUE, sep=',')
names(df_Emax)=c("Power","Integral")
df_Emax$Integral <- df_Emax$Integral/df_Emax$Integral[[1]] # normalization
MaxPower <- df_Emax$Power[length(df_Emax$Power)]
df_T1=read.csv(file="PowerVsT1.csv", header=TRUE, sep=',')
names(df_T1)=c("Power_T1","T1p", "T1p_error")
df_T1p <- df_T1[1:length(df_T1$T1p)-1,]
View(df_T1p)
T10 <- df_T1$T1p[length(df_T1$T1p)]
T10_SD <- df_T1$T1p_error[length(df_T1$T1p)]
ggplot(data=df_T1p, aes(x=Power_T1, y=T1p)) + geom_point()
cor(df_T1p$Power_T1, df_T1p$T1p)
View(df_T1p)
View(df_T1p)
model = lm(df_T1p$Power_T1, df_T1p$T1p)
lm(df_T1p$Power_T1, df_T1p$T1p)
lm(Power_T1, T1p, data=df_T1p)
lm(Power_T1~T1p, data=df_T1p)
cor(df_T1p$Power_T1~df_T1p$T1p)
lm(Power_T1~T1p, data=df_T1p)
lm.fit <- lm(Power_T1~T1p, data=df_T1p)
lm.fit = lm(Power_T1~T1p, data=df_T1p)
lmfit = lm(Power_T1~T1p, data=df_T1p)
summary(lm.fit)
ggplot(data=df_T1p, aes(x=Power_T1, y=T1p)) + geom_point()
cor(df_T1p$Power_T1,df_T1p$T1p)
cor(df_T1p$T1p,df_T1p$T1p)
cor(df_T1p$Power_T1,df_T1p$T1p)
cor(df_T1$Power_T1,df_T1p$T1p)
df_T1p
summary(df_T1o)
summary(df_T1p)
head(df_T1p)
cor(df_T1p$Power_T1,df_T1p$T1p)
df_T1p <- df_T1[1:length(df_T1$T1p)-2,]
length(df_T1$T1p)
df_T1p <- df_T1[1:(length(df_T1$T1p)-1),]
df_T1o
df_T1p
cor(df_T1p$T1p,df_T1p$T1p)
cor(df_T1p$Power_T1,df_T1p$T1p)
df_T1p <- data.frame(df_T1[1:(length(df_T1$T1p)-1),])
cor(df_T1p$Power_T1,df_T1p$T1p)
class(df_T1p)
str(df_T1p)
str(df_T1)
str(df_Emax)
df_T1 = as.numeric(df_T1)
as.numeric(levels(df_T1))[df_T1]
df_T1$Power_T1
df_T1p$Power_T1
df_T1p <- df_T1[1:(length(df_T1$T1p)-1),]
df_T1p$Power_T1
str(df_T1p$Power_T1)
df_T1p$Power_T1 = as.numeric(levels(df_T1p$Power_T1))[df_T1p$Power_T1]
View(df_T1p)
df_T1p <- df_T1[1:(length(df_T1$T1p)-1),]
df_T1p
df_T1=read.csv(file="PowerVsT1.csv", header=TRUE, sep=',')
names(df_T1)=c("Power_T1","T1p", "T1p_error")
str(df_T1)
df_T1p <- df_T1[1:(length(df_T1$T1p)-1),]
T10 <- df_T1$T1p[length(df_T1$T1p)]
T10_SD <- df_T1$T1p_error[length(df_T1$T1p)]
cor(df_T1p$Power_T1,df_T1p$T1p)
lmfit = lm(Power_T1~T1p, data=df_T1p)
summary(lm.fit)
summary(lmfit)
lm.cor = cor(df_T1p$Power_T1,df_T1p$T1p)
lm.cor
lmfit2 = lm(Power_T1~ ~ poly(T1p, 2, raw=TRUE), data=df_T1p)
lmfit2 = lm(Power_T1 ~ poly(T1p, 2, raw=TRUE), data=df_T1p)
summary(lmfit2)
lm.cor = cor(df_T1p$Power_T1,df_T1p$T1p) # linear correlation
if(lm.cor > 0.8){
lmfit = lm(Power_T1~T1p, data=df_T1p)
} else {
lmfit = lm(Power_T1~ ~ poly(T1p, 2, raw=TRUE), data=df_T1p)
}
summary(lmfit)
plot(df_T1p$Power_T1, df_T1p$T1p, type="l", lwd=3)
plot(df_T1p$Power_T1, df_T1p$T1p, type="p", lwd=3)
plot(df_T1p$Power_T1, predict(lmfit), type="l", col="red", lwd=2)
point(df_T1p$Power_T1, predict(lmfit), type="l", col="red", lwd=2)
plot(df_T1p$Power_T1, df_T1p$T1p, type="p", lwd=3)
points(df_T1p$Power_T1, predict(lmfit), type="l", col="red", lwd=2)
MaxPower_T1 <- max(df_T1p$Power_T1)
power_x <- seq(0, MaxPower_T1*1.1, MaxPower_T1*1.15/50)
fitted.T1data <- data.frame(x=power_x, y=predict(lmfit, list(Power_T1 = power_x)))
View(fitted.data)
lmfit
predict(lmfit)
predict(lmfit, list(x=power_x))
predict(lmfit, list(power_x))
fitted.T1data <- data.frame(x=power_x, y=predict(lmfit, list(Power_T1 = power_x)))
fitted.T1data <- data.frame(x=power_x, y=predict(lmfit, list(x = power_x)))
predict(lmfit, df_T1p)
fitted.T1data <- data.frame(x=power_x, y=predict(lmfit, power_x))
fitted.T1data <- data.frame(x=power_x, y=predict(lmfit, list(power_x))
fitted.T1data <- data.frame(x=power_x, y=predict(lmfit, list(power_x)))
fitted.T1data <- data.frame(x=power_x, y=predict(lmfit, list(power_x)))
attach(mtcars)
range(df_T1p$T1p)
range(df_T1p$Power_T!)
range(df_T1p$Power_T1)
power_x <- seq(0, MaxPower_T1*1.1, MaxPower_T1*1.15/50)
fitted.T1data <- predict(lmfit, newdata=power_x, se.fit = TRUE)
summary(lmfit)
power_x <- seq(0, MaxPower_T1*1.1, MaxPower_T1*1.15/50)
fitted.T1data <- predict(lmfit, newdata=power_x, se.fit = TRUE)
str(power_x)
fitted.T1data <- predict.lm(lmfit, newdata=power_x, se.fit = TRUE)
power_x <- data.frame(seq(0, MaxPower_T1*1.1, MaxPower_T1*1.15/50))
fitted.T1data <- predict(lmfit, newdata=power_x, se.fit = TRUE)
power_x <- data.frame(Power_T1=seq(0, MaxPower_T1*1.1, MaxPower_T1*1.15/50))
fitted.T1data <- predict(lmfit, newdata=power_x, se.fit = TRUE)
View(power_x)
str(power_x)
fitted.T1data <- predict(lmfit, newdata=power_x$Power_T1, se.fit = TRUE)
fitted.T1data <- predict(lmfit, newdata=power_x)
power_x <- data.frame(seq(0, MaxPower_T1*1.1, MaxPower_T1*1.15/50))
View(power_x)
power_x <- data.frame(x=seq(0, MaxPower_T1*1.1, MaxPower_T1*1.15/50))
View(power_x)
fitted.T1data <- predict(lmfit, newdata=power_x)
power_x <- data.frame(Power_T1=seq(0, MaxPower_T1*1.1, MaxPower_T1*1.15/50))
power_x <- data.frame(Power_T1=seq(0, MaxPower_T1*1.1))#, MaxPower_T1*1.15/50))
fitted.T1data <- predict(lmfit, newdata=power_x)
power_x <- data.frame(Power_T1=seq(0, MaxPower_T1*1.1), MaxPower_T1*1.15/50))
power_x <- data.frame(Power_T1=seq(0, MaxPower_T1*1.1, MaxPower_T1*1.15/50))
power_x <- data.frame(Power_T1=seq(0, MaxPower_T1*1.1, MaxPower_T1*1.1/50))
fitted.T1data <- predict(lmfit, newdata=power_x)
predict(lmfit, newdata=power_x)
lmfit = lm(Power_T1~T1p, data=df_T1p)
summary(lmfit)
power_x <- data.frame(Power_T1=seq(0, MaxPower_T1*1.1, MaxPower_T1*1.1/50))
predict(lmfit, newdata=power_x)
lmfit = lm(T1p~Power_T1, data=df_T1p)
summary(lmfit)
power_x <- data.frame(Power_T1=seq(0, MaxPower_T1*1.1, MaxPower_T1*1.1/50))
fitted.T1data <- predict(lmfit, newdata=power_x)
fitted.T1data <- predict(lmfit, newdata=power_x, se.fit = TRUE)
fitted.T1data
power_x <- data.frame(Power_T1=seq(0, MaxPower_T1*1.1, MaxPower_T1*1.1/50))
fitted.T1data <- predict(lmfit, newdata=power_x, se.fit = TRUE)
power_x$lci <- fitted.T1data$fit - 1.96 * fitted.T1data$se.fit
power_x$fit <- fitted.T1data$fit
power_x$uci <- fitted.T1data$fit + 1.96 * fitted.T1data$se.fit
ggplot(power_x, aes(x = x, y = fit)) +
theme_bw() +
geom_line() +
geom_smooth(aes(ymin = lci, ymax = uci), stat = "identity") +
geom_point(data=df_T1p, aes(x=Power_T1, y=T1p))
ggplot(power_x, aes(x = x, y = fit))
ggplot(power_x, aes(x = x, y = fit)) +
theme_bw() +
geom_line() +
geom_smooth(aes(ymin = lci, ymax = uci), stat = "identity") +
geom_point(data=df_T1p, aes(x=Power_T1, y=T1p))
View(power_x)
power_x <- data.frame(x=seq(0, MaxPower_T1*1.1, MaxPower_T1*1.1/50))
fitted.T1data <- predict(lmfit, newdata=power_x, se.fit = TRUE)
power_x <- data.frame(Power_T1=seq(0, MaxPower_T1*1.1, MaxPower_T1*1.1/50))
fitted.T1data <- predict(lmfit, newdata=power_x, se.fit = TRUE)
power_x$lci <- fitted.T1data$fit - 1.96 * fitted.T1data$se.fit
power_x$fit <- fitted.T1data$fit
power_x$uci <- fitted.T1data$fit + 1.96 * fitted.T1data$se.fit
ggplot(power_x, aes(x = Power_T1, y = fit)) +
theme_bw() +
geom_line() +
geom_smooth(aes(ymin = lci, ymax = uci), stat = "identity") +
geom_point(data=df_T1p, aes(x=Power_T1, y=T1p))
ggplot(power_x, aes(x = Power_T1, y = fit)) +
theme_bw() +
geom_line() +
geom_smooth(aes(ymin = lci, ymax = uci), stat = "identity") +
geom_point(data=df_T1p, aes(x=Power_T1, y=T1p), color="red", size=3) +
xlab("MW power (Watt)")
ylab("T1 (s)")
ggplot(power_x, aes(x = Power_T1, y = fit)) +
theme_bw() +
geom_line() +
geom_smooth(aes(ymin = lci, ymax = uci), stat = "identity") +
geom_point(data=df_T1p, aes(x=Power_T1, y=T1p), color="red", size=3) +
xlab("MW power (Watt)") +
ylab("T1 (s)")
df_T1p$T1p
df_T1p$T1p[1]
CSL = 500*10^-6 # in uM
CSL = 500*10^-6 # in Molar
f_krho <- function(T1, T10, CSL) {
(1/T1-1/T10)/CSL
}
krho <- f_krho(df_T1p$T1p[1],T10,CSL)
krho
ggplot(data=df_Emax, aes(x=Power, y=Integral)) + geom_point()
ggplot(data=df_Emax, aes(x=Power, y=Integral)) + geom_point()
ggplot(data=df_Emax, aes(x=Power, y=Integral)) + geom_point()
library(ggplot2) #library for plotting
CSL = 500*10^-6 # in Molar
df_Emax=read.csv(file="Emax.csv", header=TRUE, sep=',')
names(df_Emax)=c("Power","Integral")
df_Emax$Integral <- df_Emax$Integral/df_Emax$Integral[[1]] # normalization
MaxPower <- df_Emax$Power[length(df_Emax$Power)]
ggplot(data=df_Emax, aes(x=Power, y=Integral)) + geom_point()
View(df_Emax)
View(df_Emax)
ggplot(df_Emax,aes(x=Power,y=Integral)) + geom_point(color="red", size=3)
ggplot(df_Emax,aes(x=Power,y=Integral)) + geom_point(color="red", size=3) + scale_x_continuous(breaks=1:10) + xlab("Power (Watt)")+ylab("peak integral") + geom_line(data = fitted.data, aes(x=x, y=y), color ='blue', alpha=.5)
ggplot(df_Emax,aes(x=Power,y=Integral)) + geom_point(color="red", size=3) + scale_x_continuous(breaks=1:10) + xlab("Power (Watt)")+ylab("peak integral") + geom_line(data = fitted.data, aes(x=x, y=y), color ='blue', alpha=.5)
View(df_Emax)
str(df_Emax)
plot(df_Emax$Power, df_Emax$Integral)
ggplot(power_x, aes(x = Power_T1, y = fit)) +
theme_bw() +
geom_line() +
geom_smooth(aes(ymin = lci, ymax = uci), stat = "identity") +
geom_point(data=df_T1p, aes(x=Power_T1, y=T1p), color="red", size=3) +
xlab("MW power (Watt)") +
ylab("T1 (s)")
